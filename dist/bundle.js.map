{"version":3,"sources":["webpack://typescript-learning-test/./src/index.ts","webpack://typescript-learning-test/webpack/startup"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["//TypeScript був створений для більш зручного створення проектів\r\n\r\n//Вказування типів змінним та типи повернення результатів функцій і тд - це правило хорошого тону кодування на TypeScript\r\n\r\n//npm i -g typescript\r\n//tsc --init\r\n\r\n// Запуск програми з консолі tsc index.ts => після компіляції ts код інтерпритується в js (у файлі index.js)\r\n\r\n//В змінні не можна занести значення іншого типу\r\n//по дефолту тип новостворених змінних є any (якщо не вказати тип самостійно)\r\nlet str: string = 'Some string!';\r\n\r\nlet num: number = 7;\r\n\r\nlet isTrue = true;\r\nlet isFalse: boolean = false;\r\n\r\nlet unkn: any = '17';\r\nunkn = 15;\r\n\r\n//Змінна може зберігати лише стрічку або число\r\nlet unkn2: string | number =  '17';\r\nunkn = 15;\r\n\r\n// Масиви\r\n\r\nlet numArray1: number[] = [1,2,3,4,5,6,7,8,9]\r\nlet numArray2: Array<number> = [1,2,3,4,5,6,7,8,9]\r\n\r\nlet strArray1: string[] = [\"w\",\"w\",\"w\"]\r\nlet strArray2: Array<string> = [\"w\",\"w\",\"w\",\"w\"]\r\n\r\nlet booleanArray1: boolean[] = [true,false]\r\nlet booleanArray2: Array<boolean> = [true,true,true]\r\n\r\nlet array: [number, number, string] = [1, 2, \"w\"]\r\nlet array2: Array<any> = [1, 2, \"w\"]\r\n\r\n//Функції\r\n\r\nconst a:string = \"1\"\r\nconst b = 5\r\n\r\n// Вказування типу повертання необов'язкове (але якщо функція нічого не повертає то варто вказувати void)\r\nfunction getStr(): string {\r\n    return a;\r\n}\r\n\r\nconsole.log(getStr())\r\n\r\n\r\n\r\nfunction getNum(): number {\r\n    return b;\r\n}\r\n\r\nconsole.log(getNum())\r\n\r\n\r\n\r\nfunction sum(a: number, b:number): number\r\n{\r\n    return a + b;\r\n}\r\n\r\nconsole.log(sum(7,10))\r\n\r\n//Правило хорошого тону при присвоєнні функції змінній\r\nlet contain: (num1:number, b:number) => number = sum;\r\nconsole.log(contain( 17, 25 ))\r\n\r\n\r\nfunction test(x: string, y: number): string\r\n{\r\n    return x+y\r\n}\r\n\r\nconsole.log('w', 7)\r\n\r\n\r\n\r\nfunction test2(z: string): void {\r\n    console.log(z)\r\n}\r\n\r\ntest2(\"Hello TypeScript!\")\r\n\r\n//Об'єкти\r\n\r\nconst obj: { name: string, age: number, getName: () => void, phones: string[] } = {\r\n\r\n    name: \"Www\",\r\n    age: 19,\r\n\r\n\r\n    getName(): void {\r\n        console.log(this.name)\r\n    },\r\n\r\n    phones: ['+38097...', '+38093...']\r\n}\r\n\r\n\r\n//? перед типами змінних дає зрозуміти, що змінна не обов'язкова або не застусовується в одному з об'єктів\r\ntype User = { name: string, age: number, faculty?:string, getName: () => void, getFaculty?: () => void, phones: string[] };\r\n\r\nconst obj2: User = {\r\n\r\n    name: \"Wolodymyr\",\r\n    age: 19,\r\n\r\n\r\n    getName(): void {\r\n        console.log(this.name)\r\n    },\r\n\r\n    phones: ['+38097...', '+38093...']\r\n}\r\n\r\n\r\nconst obj3: User = {\r\n\r\n    name: \"Woleslaw\",\r\n    age: 27,\r\n    faculty: \"AMI\",\r\n\r\n    getName(): void {\r\n        console.log(this.name)\r\n    },\r\n\r\n    getFaculty(): void{\r\n        console.log(this.faculty)\r\n    },\r\n\r\n    phones: ['+38097...', '+38093...']\r\n}\r\n\r\n//Компілятор \r\n\r\n//tsconfig.json => \"noEmitOnError\" : true - не створює (не генерує) index.js файл, якщо при компілюванні TypeScript коду присутні помилки\r\n\r\n\r\n//Спец.типи Enum, Never, Null\r\n\r\n//Використовується для визначення констант\r\nenum Job\r\n{\r\n    //По дефолту номерування починається з нуля\r\n    Frontend, //0\r\n    Backend = 71,\r\n    Desingner //72 //Подальша константа приймає, збільшене на одиницю, значення попередньої константи\r\n}\r\n\r\nconst job: Job = Job.Backend;\r\nconsole.log(job);\r\n\r\nconst job2: Job = Job.Desingner;\r\nconsole.log(job2);\r\n\r\nconst job3: Job = Job.Frontend;\r\nconsole.log(job3);\r\n\r\n//Ще приклад\r\nenum MathConstants\r\n{\r\n    PI = 3.14,\r\n    e = 2.18\r\n}\r\n\r\nconsole.log(MathConstants.PI)\r\nconsole.log(MathConstants.e)\r\n\r\n//---Never\r\n\r\nfunction throwNewException(error:string): never\r\n{\r\n    throw new Error(error)\r\n}\r\n\r\n//---Null\r\n\r\nlet variable: number | null = 79;\r\nvariable = null;\r\n\r\n//Класи\r\n//По замовчуванню типи доступу полів та методів є public.\r\n//private дає дозвіл користуватися полем або методом тільки в тілі класу, в якому вони були створені (не дозволяється доступ також об'єкту класу).\r\n//Тип доступу protected дозволяє доступатись до цього поля власному класу та нащадкам класу, але не дає можливості доступатися до поля через екземпляр класу.\r\n\r\n//***************** Методи == Функції, тільки вони притаманні класам, та створюються без ключового слова function !**************\r\n\r\nclass Person\r\n{\r\n    public name: string;\r\n    private age: number | undefined;\r\n    protected faculty: string | undefined; //Те саме що private, але доступний в класах наслідників\r\n\r\n    constructor(name: string, age: number | undefined, public course: number){ //public course: number - це те саме що створення поля,\r\n                                                                            // а потім присвоєння через конструктор йому значення this.course = course;\r\n        this.name = name;\r\n        this.age = age;\r\n    }\r\n\r\n    public getName(): void {\r\n        console.log(`Person name is : ${this.name}`);\r\n    }\r\n    \r\n    setAge(age:number): void { // default public\r\n        this.age = age;\r\n    }\r\n\r\n    getAge(): void {\r\n        console.log(`Person age is :  ${this.age}`)\r\n        console.log(`Stadiying course : ${this.getCourse()}`)\r\n    }\r\n\r\n    private getCourse():number{\r\n        return this.course;\r\n    }\r\n}\r\n\r\nconst person = new Person(\"Woleslav\", undefined, 3);\r\nperson.getName();\r\nperson.setAge(27)\r\nperson.getAge();\r\n//console.log(person.getCourse())\r\n\r\n\r\n//Наслідування та абстрактні класи\r\n\r\n//Наслідувати ми можемо тільки один клас.\r\n//Наслідування, ключове слово : extends.\r\n//Від абстрактних (шаблонних) класів ми не можемо створювати екземпляри (вони створюються лиш для того, щоб від них наслідуватись звичайні класи), ключове слово : abstract class\r\n//Також можлива реалізація абстрактних методів (Їхня реалізація можлива лише всередині абстрактних класів).\r\n\r\nabstract class Car { //Екземпляри даного класу створювати забороняється\r\n    protected model: string; //Данні поля будуть доступні у дочірньому класі\r\n    protected gradYear: number;\r\n    constructor(model: string, year:number)\r\n    {\r\n        console.log(\"Car constructor was called!\")\r\n        this.model = model;\r\n        this.gradYear = year;\r\n    }\r\n    abstract fullInfo(): void;\r\n    getModel(): void { console.log( this.model )}\r\n}\r\n\r\nclass Audi extends Car {\r\n    constructor(model: string, year:number)\r\n    {\r\n        console.log(\"Audi constructor was called!\")\r\n        super(model, year);\r\n    }\r\n    fullInfo(): void { \r\n        console.log(`Model: ${this.model} \\nGraduation Year: ${this.gradYear}`);\r\n    }\r\n}\r\n\r\nconst car = new Audi(\"A7\", 2021);\r\ncar.fullInfo(); //Model: A7 \r\n               //Graduation Year: 2021\r\n\r\ncar.getModel(); //A7\r\n\r\n//Інтерфейси\r\n\r\n//Інтерфейси задають мінімальний функціонал, який повинен бути реалізований у майбутніх об'єктах або класах. \r\n// Також використовуються в функціях для перевірки функціоналу змінних які передаються (Якщо властивості змінної не відповідають потребам інтерфейсу, така змінна в функцію не допускається).\r\n\r\ninterface IUser {\r\n    login: string;\r\n    password: string;\r\n    id: number;\r\n    getData(): void;\r\n}\r\n\r\nconst user:IUser = {\r\n    login: \"nmyknmtyltr\",\r\n    password: \"124324htyhy5j6y\",\r\n    id: 1,\r\n    getData(): void {\r\n        console.log(this.login, this.password)\r\n    }\r\n\r\n}\r\n\r\ninterface ICondition {\r\n    length: number;\r\n}\r\n\r\nfunction getVariableLength( variable: ICondition  ):number { //Змінна мусить містити властивість lenght || Або можемо обійтись без інтерфейсу вказавши variable: { lenght:number }\r\n    return variable.length;\r\n}\r\n\r\n//implements for classes\r\n//Імплементуватися від інтерфейсів ми можемо безліч разів.\r\n\r\ninterface IAnimalClassVariablesContain {\r\n    name?: string; //? вказує на те, що поле може бути необов'язковим до створення\r\n    yearOld: number;\r\n    breed: string;\r\n}\r\n\r\ninterface IAnimalClassMethodsContain {\r\n    getInfo(): void;\r\n    setBreed(year:number): void;\r\n    getBreed(): string;\r\n}\r\n\r\nclass Animal implements IAnimalClassVariablesContain, IAnimalClassMethodsContain {\r\n\r\n    public breed: string;\r\n    constructor( public name: string, public yearOld: number, breed:string){\r\n        this.breed = breed;\r\n    }\r\n    getInfo(): void\r\n    {\r\n        console.log(`The Animal is: ${this.getBreed()} \\nName: ${this.name}\\nYear Old: ${this.yearOld}`)\r\n    }\r\n    getBreed(): string\r\n    {\r\n        return this.breed;\r\n    }\r\n    setBreed(year:number): void\r\n    {\r\n        this.yearOld = year;\r\n    }\r\n\r\n}\r\n\r\nconst animal = new Animal(\"Lord\", 5, \"German Dog\")\r\nanimal.getInfo();\r\n\r\n//generic\r\n\r\n//Використовується в ситуціях коли ми передаємо різні типи даних.\r\n\r\nfunction genericDataGetter<T>( data:T ) : T  // T - умовний тип даних який ми передаємо (Це може бути string, number і так далі).\r\n                                            // Накшталт let array: Array<number> = ...\r\n{\r\n    return data;\r\n}\r\n\r\nconsole.log(genericDataGetter(100))\r\nconsole.log(genericDataGetter<number>(100).toFixed(2)) //Можна також явно вказувати який тип ми передаємо\r\nconsole.log(genericDataGetter<string>(\"Hi, TypeScript!\"))\r\nconsole.log(genericDataGetter<string>(\"Hi, TypeScript!\").length) //Є можливість доступатися до методів прототипів переданих об'єктів (Наприклад length),\r\n                                                                // але даний метод вже буде не доступний для звичайного переданого числа.\r\nconst genericVariableFunction: <T>(data:T) => T = genericDataGetter; //Присвоєння generic функції звичайній змінній\r\nconsole.log(genericVariableFunction<string>( \"I'm variable generic function!\" ))\r\nconsole.log(genericVariableFunction<number>( 100000 ))\r\n\r\n//Щоб привести стрічку до числа ми можемо використовувати такі методи: +перед змінною, parseInt, Number()\r\n\r\nclass A<T extends number | string> { //Вказуємо що типи класу можуть бути тільки number, або string (Тип genetic так би мовити наслідує ці типи)\r\n    constructor(private a: T, private b: T){}\r\n    public Additition(): number\r\n    {\r\n        return +this.a + Number(this.b);\r\n    }\r\n}\r\nconsole.log(new A(50, 50).Additition())\r\nconsole.log(new A<number>(70, 10).Additition()) // 80\r\nconsole.log(new A<string>('7', '7').Additition()) // 14\r\n\r\n\r\n//Декоратори\r\n\r\n// Ключовий символ @\r\n// \"experimentalDecorators\": true, \r\n\r\nfunction setMethodsDecorator(constructorFn: Function)\r\n{\r\n    constructorFn.prototype.showInfoInHtml = function() {\r\n        const a = document.createElement('a');\r\n        a.innerHTML = JSON.stringify(this);\r\n        document.body.appendChild(a)\r\n    }\r\n}\r\nfunction print(furniture : any): void\r\n{\r\n    console.log(furniture)\r\n}\r\n\r\n\r\n@setMethodsDecorator\r\n@print\r\nclass Furniture {\r\n    constructor(public type: string, private name: string, private warrantyPeriod: number){}\r\n}\r\n\r\nconst furniture = new Furniture(\"Build furniture\", \"lock\", 10);\r\nconsole.log(furniture);\r\n(<any>furniture).showInfoInHtml();\r\n\r\n//Namespace\r\n\r\n// Ключове слово namespace _name_ {}\r\n//По дефолту всі елементи namespace приватні, щоб зробити їх публічними вказуємо перед елементом ключове слово export\r\n\r\nnamespace Util {\r\n    export const PI = Math.PI;\r\n    export const EXP = Math.E;\r\n    const LOG2E = Math.LOG2E; //private by default\r\n}\r\n\r\nconst PI = 3.14;\r\nconsole.log(PI)\r\n\r\nconsole.log(Util.PI)\r\nconsole.log(Util.EXP)\r\n\r\n//TypeScript і Webpack\r\n\r\n// npm init;\r\n// npm i --save-dev webpack typescript;\r\n//create webpack.config.js;\r\n//create any dists and files for further work;\r\n//Connection script file bundle.js in index.html;\r\n//npm i awesome-typescript-loader --save-dev --force та вставляємо конфігурацію з гітхаба у webpack.config.js (встановили loader локально)\r\n// (PS. міняємо назву властивості loaders на rules та видаляємо у властивості extensions пусту стрічку в масиві); || Скачування необхідного лоадеру для ts\r\n//Запускаємо webpack через консоль ключовим словом webpack;\r\n//webpack --mode=none // Для кращої читабельності коду в bundle.js\r\n\r\n//Як результат ми отримали повністю згерерований es5 код у bundle.js на основі коду написаного на typescript (файл index.ts)\r\n\r\n//********PS. це був останній урок, до цього ми запускали програму (код) беспосередньо через консоль, командою tsc index.ts,\r\n// та як результат отримували інтерпритований код typescript у код стандарту ecmascript5, який записувався у index.js файл та запускався.","// startup\n// Load entry module\n// This entry module is referenced by other modules so it can't be inlined\n__webpack_modules__[0]();\n"],"sourceRoot":""}